// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package pg

import (
	"context"
)

const getSportsmenBySportID = `-- name: GetSportsmenBySportID :many
SELECT sm.id, sm.name, sm.birth_date, sm.height_cm, sm.weight_kg, sm.club_id, sm.created_at
FROM sportsman_sports ss
JOIN sportsmen sm ON sm.id = ss.sportsman_id
WHERE
	ss.sport_id = $1
	AND ($2::SMALLINT IS NULL OR ss.rank = $2)
`

type GetSportsmenBySportIDParams struct {
	SportID int64
	Rank    int16
}

func (q *Queries) GetSportsmenBySportID(ctx context.Context, arg GetSportsmenBySportIDParams) ([]Sportsman, error) {
	rows, err := q.db.Query(ctx, getSportsmenBySportID, arg.SportID, arg.Rank)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sportsman
	for rows.Next() {
		var i Sportsman
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BirthDate,
			&i.HeightCm,
			&i.WeightKg,
			&i.ClubID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
