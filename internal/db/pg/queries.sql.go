// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package pg

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteClubByID = `-- name: DeleteClubByID :exec
DELETE FROM clubs
WHERE id = $1
`

// Query: #49 (custom)
//
// Удаляет клуб по ID.
func (q *Queries) DeleteClubByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteClubByID, id)
	return err
}

const deleteOrganizerByID = `-- name: DeleteOrganizerByID :exec
DELETE FROM organizers
WHERE id = $1
`

// Query: #45 (custom)
//
// Удаляет организатора по ID.
func (q *Queries) DeleteOrganizerByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteOrganizerByID, id)
	return err
}

const deletePlaceByID = `-- name: DeletePlaceByID :exec
DELETE FROM places
WHERE id = $1
`

// Query: #34 (custom)
//
// Удаляет сооружение.
func (q *Queries) DeletePlaceByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePlaceByID, id)
	return err
}

const deleteSportByID = `-- name: DeleteSportByID :exec
DELETE FROM sports
WHERE id = $1
`

// Query: #28 (custom)
//
// Удаляет спорт по идентификатору.
func (q *Queries) DeleteSportByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSportByID, id)
	return err
}

const deleteSportsmanByID = `-- name: DeleteSportsmanByID :exec
DELETE FROM sportsmen
WHERE id = $1
`

// Query: #21 (custom)
//
// Удаляет спортсмена по ID.
func (q *Queries) DeleteSportsmanByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSportsmanByID, id)
	return err
}

const deleteTrainerByID = `-- name: DeleteTrainerByID :exec
DELETE FROM trainers
WHERE id = $1
`

// Query: #53 (custom)
//
// Удаляет клуб по ID.
func (q *Queries) DeleteTrainerByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTrainerByID, id)
	return err
}

const getArenaByID = `-- name: GetArenaByID :one
SELECT
	p.id,
	p.name,
	p.location,
	aa.referees_count,
	aa.treadmill_length_cm
FROM places p
JOIN arena_attributes aa ON aa.place_id = p.id
WHERE p.id = $1
`

type GetArenaByIDRow struct {
	ID                int64
	Name              string
	Location          string
	RefereesCount     int16
	TreadmillLengthCm int64
}

// Query: #35 (custom)
//
// Получить арену.
func (q *Queries) GetArenaByID(ctx context.Context, id int64) (GetArenaByIDRow, error) {
	row := q.db.QueryRow(ctx, getArenaByID, id)
	var i GetArenaByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.RefereesCount,
		&i.TreadmillLengthCm,
	)
	return i, err
}

const getArenas = `-- name: GetArenas :many
SELECT
	p.id,
	p.name,
	p.location,
	aa.referees_count,
	aa.treadmill_length_cm
FROM places p
JOIN arena_attributes aa ON aa.place_id = p.id
WHERE
	(
		aa.referees_count >= $1
		OR $1 IS NULL
	)
	AND (
		aa.treadmill_length_cm >= $2
		OR $2 IS NULL
	)
`

type GetArenasParams struct {
	RefereesCount     pgtype.Int2
	TreadmillLengthCm pgtype.Int8
}

type GetArenasRow struct {
	ID                int64
	Name              string
	Location          string
	RefereesCount     int16
	TreadmillLengthCm int64
}

// Query #1.1
//
// Получить перечень спортивных сооружений указанного типа в целом или
// удовлетворяющих заданным характеристикам (например, стадионы, вмещающие не менее
// указанного числа зрителей).
func (q *Queries) GetArenas(ctx context.Context, arg GetArenasParams) ([]GetArenasRow, error) {
	rows, err := q.db.Query(ctx, getArenas, arg.RefereesCount, arg.TreadmillLengthCm)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetArenasRow
	for rows.Next() {
		var i GetArenasRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.RefereesCount,
			&i.TreadmillLengthCm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClubActiveSportsmenCountsForPeriod = `-- name: GetClubActiveSportsmenCountsForPeriod :many
SELECT
	c.id,
	c.name,
	COUNT(DISTINCT s.id)
		FILTER (WHERE t.start_at BETWEEN $1 AND $2)
		AS active_sportsmen_count
FROM clubs c
LEFT JOIN sportsmen s ON s.club_id = c.id
LEFT JOIN participations p ON p.sportsman_id = s.id
LEFT JOIN tournament_sports ts ON ts.id = p.tournament_sport_id
LEFT JOIN tournaments t ON t.id = ts.tournament_id
GROUP BY
	c.id,
	c.name
ORDER BY c.name
`

type GetClubActiveSportsmenCountsForPeriodParams struct {
	StartAt pgtype.Timestamptz
	EndAt   pgtype.Timestamptz
}

type GetClubActiveSportsmenCountsForPeriodRow struct {
	ID                   int64
	Name                 string
	ActiveSportsmenCount int64
}

// Query #9
//
// Получить перечень спортивных клубов и число спортсменов этих клубов, участвовавших в
// спортивных соревнованиях в течение заданного интервала времени.
func (q *Queries) GetClubActiveSportsmenCountsForPeriod(ctx context.Context, arg GetClubActiveSportsmenCountsForPeriodParams) ([]GetClubActiveSportsmenCountsForPeriodRow, error) {
	rows, err := q.db.Query(ctx, getClubActiveSportsmenCountsForPeriod, arg.StartAt, arg.EndAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClubActiveSportsmenCountsForPeriodRow
	for rows.Next() {
		var i GetClubActiveSportsmenCountsForPeriodRow
		if err := rows.Scan(&i.ID, &i.Name, &i.ActiveSportsmenCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClubByID = `-- name: GetClubByID :one
SELECT
	id,
	name
FROM clubs
WHERE id = $1
`

type GetClubByIDRow struct {
	ID   int64
	Name string
}

// Query: #50 (custom)
//
// Получает клуб по идентификатору.
func (q *Queries) GetClubByID(ctx context.Context, id int64) (GetClubByIDRow, error) {
	row := q.db.QueryRow(ctx, getClubByID, id)
	var i GetClubByIDRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getClubs = `-- name: GetClubs :many
SELECT
	id,
	name
FROM clubs
`

type GetClubsRow struct {
	ID   int64
	Name string
}

// Query: #24 (custom)
//
// Получает все клубы.
func (q *Queries) GetClubs(ctx context.Context) ([]GetClubsRow, error) {
	rows, err := q.db.Query(ctx, getClubs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClubsRow
	for rows.Next() {
		var i GetClubsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourtByID = `-- name: GetCourtByID :one
SELECT
	p.id,
	p.name,
	p.location,
	ca.width_cm,
	ca.length_cm,
	ca.is_outdoor
FROM places p
JOIN court_attributes ca ON ca.place_id = p.id
WHERE p.id = $1
`

type GetCourtByIDRow struct {
	ID        int64
	Name      string
	Location  string
	WidthCm   int64
	LengthCm  int64
	IsOutdoor bool
}

// Query: #39 (custom)
//
// Получить корт.
func (q *Queries) GetCourtByID(ctx context.Context, id int64) (GetCourtByIDRow, error) {
	row := q.db.QueryRow(ctx, getCourtByID, id)
	var i GetCourtByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.WidthCm,
		&i.LengthCm,
		&i.IsOutdoor,
	)
	return i, err
}

const getCourts = `-- name: GetCourts :many
SELECT
	p.id,
	p.name,
	p.location,
	ca.width_cm,
	ca.length_cm,
	ca.is_outdoor
FROM places p
JOIN court_attributes ca ON ca.place_id = p.id
WHERE
	(
		ca.width_cm >= $1
		OR $1 IS NULL
	)
	AND (
		ca.length_cm >= $2
		OR $2 IS NULL
	)
	AND (
		ca.is_outdoor = $3
		OR $3 IS NULL
	)
`

type GetCourtsParams struct {
	WidthCm   pgtype.Int8
	LengthCm  pgtype.Int8
	IsOutdoor pgtype.Bool
}

type GetCourtsRow struct {
	ID        int64
	Name      string
	Location  string
	WidthCm   int64
	LengthCm  int64
	IsOutdoor bool
}

// Query #1.3
//
// Получить перечень спортивных сооружений указанного типа в целом или
// удовлетворяющих заданным характеристикам (например, стадионы, вмещающие не менее
// указанного числа зрителей).
func (q *Queries) GetCourts(ctx context.Context, arg GetCourtsParams) ([]GetCourtsRow, error) {
	rows, err := q.db.Query(ctx, getCourts, arg.WidthCm, arg.LengthCm, arg.IsOutdoor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCourtsRow
	for rows.Next() {
		var i GetCourtsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.WidthCm,
			&i.LengthCm,
			&i.IsOutdoor,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGymByID = `-- name: GetGymByID :one
SELECT
	p.id,
	p.name,
	p.location,
	ga.trainers_count,
	ga.dumbbells_count,
	ga.has_bathhouse
FROM places p
JOIN gym_attributes ga ON ga.place_id = p.id
WHERE p.id = $1
`

type GetGymByIDRow struct {
	ID             int64
	Name           string
	Location       string
	TrainersCount  int16
	DumbbellsCount int16
	HasBathhouse   bool
}

// Query: #41 (custom)
//
// Получить зал.
func (q *Queries) GetGymByID(ctx context.Context, id int64) (GetGymByIDRow, error) {
	row := q.db.QueryRow(ctx, getGymByID, id)
	var i GetGymByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.TrainersCount,
		&i.DumbbellsCount,
		&i.HasBathhouse,
	)
	return i, err
}

const getGyms = `-- name: GetGyms :many
SELECT
	p.id,
	p.name,
	p.location,
	ga.trainers_count,
	ga.dumbbells_count,
	ga.has_bathhouse
FROM places p
JOIN gym_attributes ga ON ga.place_id = p.id
WHERE
	(
		ga.trainers_count >= $1
		OR $1 IS NULL
	)
	AND (
		ga.dumbbells_count >= $2
		OR $2 IS NULL
	)
	AND (
		ga.has_bathhouse = $3
		OR $3 IS NULL
	)
`

type GetGymsParams struct {
	TrainersCount  pgtype.Int2
	DumbbellsCount pgtype.Int2
	HasBathhouse   pgtype.Bool
}

type GetGymsRow struct {
	ID             int64
	Name           string
	Location       string
	TrainersCount  int16
	DumbbellsCount int16
	HasBathhouse   bool
}

// Query #1.4
//
// Получить перечень спортивных сооружений указанного типа в целом или
// удовлетворяющих заданным характеристикам (например, стадионы, вмещающие не менее
// указанного числа зрителей).
func (q *Queries) GetGyms(ctx context.Context, arg GetGymsParams) ([]GetGymsRow, error) {
	rows, err := q.db.Query(ctx, getGyms, arg.TrainersCount, arg.DumbbellsCount, arg.HasBathhouse)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGymsRow
	for rows.Next() {
		var i GetGymsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.TrainersCount,
			&i.DumbbellsCount,
			&i.HasBathhouse,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInactiveSportsmenForPeriod = `-- name: GetInactiveSportsmenForPeriod :many
SELECT
	sm.id,
	sm.name,
	sm.birth_date,
	sm.height_cm,
	sm.weight_kg,
	c.id AS club_id,
	c.name AS club_name
FROM sportsmen sm
JOIN clubs c ON c.id = sm.club_id
WHERE NOT EXISTS (
	SELECT 1
	FROM participations p
	JOIN tournament_sports ts ON ts.id = p.tournament_sport_id
	JOIN tournaments t ON t.id = ts.tournament_id
	WHERE
		t.start_at BETWEEN $1 AND $2
		AND p.sportsman_id = sm.id
)
ORDER BY sm.name
`

type GetInactiveSportsmenForPeriodParams struct {
	StartAt pgtype.Timestamptz
	EndAt   pgtype.Timestamptz
}

type GetInactiveSportsmenForPeriodRow struct {
	ID        int64
	Name      string
	BirthDate pgtype.Date
	HeightCm  int16
	WeightKg  pgtype.Numeric
	ClubID    int64
	ClubName  string
}

// Query: #11
//
// Получить список спортсменов, не участвовавших ни в каких соревнованиях в течение
// определенного периода времени.
func (q *Queries) GetInactiveSportsmenForPeriod(ctx context.Context, arg GetInactiveSportsmenForPeriodParams) ([]GetInactiveSportsmenForPeriodRow, error) {
	rows, err := q.db.Query(ctx, getInactiveSportsmenForPeriod, arg.StartAt, arg.EndAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInactiveSportsmenForPeriodRow
	for rows.Next() {
		var i GetInactiveSportsmenForPeriodRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BirthDate,
			&i.HeightCm,
			&i.WeightKg,
			&i.ClubID,
			&i.ClubName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrganizerByID = `-- name: GetOrganizerByID :one
SELECT
	id,
	name,
	location
FROM organizers
WHERE id = $1
`

type GetOrganizerByIDRow struct {
	ID       int64
	Name     string
	Location pgtype.Text
}

// Query: #46 (custom)
//
// Получает организатора по идентификатору.
func (q *Queries) GetOrganizerByID(ctx context.Context, id int64) (GetOrganizerByIDRow, error) {
	row := q.db.QueryRow(ctx, getOrganizerByID, id)
	var i GetOrganizerByIDRow
	err := row.Scan(&i.ID, &i.Name, &i.Location)
	return i, err
}

const getOrganizerTournamentCountsForPeriod = `-- name: GetOrganizerTournamentCountsForPeriod :many
SELECT
	o.id,
	o.name,
	o.location,
	COUNT(t.id) AS tournaments_count
FROM organizers o
LEFT JOIN tournaments t ON
	t.organizer_id = o.id
	AND t.start_at BETWEEN $1 AND $2
GROUP BY
	o.id,
	o.name,
	o.location
ORDER BY COUNT(t.id) DESC
`

type GetOrganizerTournamentCountsForPeriodParams struct {
	StartAt pgtype.Timestamptz
	EndAt   pgtype.Timestamptz
}

type GetOrganizerTournamentCountsForPeriodRow struct {
	ID               int64
	Name             string
	Location         pgtype.Text
	TournamentsCount int64
}

// Query: #12
//
// Получить список организаторов соревнований и число проведенных ими соревнований в
// течение определенного периода времени.
func (q *Queries) GetOrganizerTournamentCountsForPeriod(ctx context.Context, arg GetOrganizerTournamentCountsForPeriodParams) ([]GetOrganizerTournamentCountsForPeriodRow, error) {
	rows, err := q.db.Query(ctx, getOrganizerTournamentCountsForPeriod, arg.StartAt, arg.EndAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrganizerTournamentCountsForPeriodRow
	for rows.Next() {
		var i GetOrganizerTournamentCountsForPeriodRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.TournamentsCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrganizers = `-- name: GetOrganizers :many
SELECT
	id,
	name,
	location
FROM organizers
ORDER BY name
`

type GetOrganizersRow struct {
	ID       int64
	Name     string
	Location pgtype.Text
}

// Query: #32 (custom)
//
// Получает всех организаторов.
func (q *Queries) GetOrganizers(ctx context.Context) ([]GetOrganizersRow, error) {
	rows, err := q.db.Query(ctx, getOrganizers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrganizersRow
	for rows.Next() {
		var i GetOrganizersRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Location); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlaces = `-- name: GetPlaces :many
SELECT
	p.id,
	p.name,
	p.location,
	pt.name AS type_name
FROM places p
JOIN place_types pt ON pt.id = p.type_id
`

type GetPlacesRow struct {
	ID       int64
	Name     string
	Location string
	TypeName string
}

// Query: #33 (custom)
//
// Получает сооружения.
func (q *Queries) GetPlaces(ctx context.Context) ([]GetPlacesRow, error) {
	rows, err := q.db.Query(ctx, getPlaces)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPlacesRow
	for rows.Next() {
		var i GetPlacesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.TypeName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlacesWithTournamentDatesForPeriod = `-- name: GetPlacesWithTournamentDatesForPeriod :many
SELECT
	p.id,
	p.name,
	p.location,
	pt.name AS type_name,
	(
		ARRAY_AGG(t.start_at ORDER BY t.start_at DESC)
		FILTER (WHERE t.start_at IS NOT NULL)
	)::TIMESTAMPTZ[] AS tournament_dates
FROM places p
JOIN place_types pt ON pt.id = p.type_id
LEFT JOIN tournaments t
	ON t.place_id = p.id
	AND t.start_at BETWEEN $1 AND $2
GROUP BY
	p.id,
	p.name,
	p.location,
	pt.name
ORDER BY p.name
`

type GetPlacesWithTournamentDatesForPeriodParams struct {
	StartAt pgtype.Timestamptz
	EndAt   pgtype.Timestamptz
}

type GetPlacesWithTournamentDatesForPeriodRow struct {
	ID              int64
	Name            string
	Location        string
	TypeName        string
	TournamentDates []pgtype.Timestamptz
}

// Query: #13
//
// Получить перечень спортивных сооружений и даты проведения на них соревнований в
// течение определенного периода времени.
func (q *Queries) GetPlacesWithTournamentDatesForPeriod(ctx context.Context, arg GetPlacesWithTournamentDatesForPeriodParams) ([]GetPlacesWithTournamentDatesForPeriodRow, error) {
	rows, err := q.db.Query(ctx, getPlacesWithTournamentDatesForPeriod, arg.StartAt, arg.EndAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPlacesWithTournamentDatesForPeriodRow
	for rows.Next() {
		var i GetPlacesWithTournamentDatesForPeriodRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.TypeName,
			&i.TournamentDates,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPrizeWinnersByTournamentID = `-- name: GetPrizeWinnersByTournamentID :many
SELECT
	sm.id,
	sm.name,
	sm.birth_date,
	sm.height_cm,
	sm.weight_kg,
	c.id AS club_id,
	c.name AS club_name,
	p.rank
FROM sportsmen sm
JOIN clubs c ON c.id = sm.club_id
JOIN participations p ON p.sportsman_id = sm.id
JOIN tournament_sports ts ON ts.id = p.tournament_sport_id
WHERE
	ts.tournament_id = $1
	AND p.rank <= 3
ORDER BY p.rank
`

type GetPrizeWinnersByTournamentIDRow struct {
	ID        int64
	Name      string
	BirthDate pgtype.Date
	HeightCm  int16
	WeightKg  pgtype.Numeric
	ClubID    int64
	ClubName  string
	Rank      int16
}

// Query #7
//
// Получить список призеров указанного соревнования.
func (q *Queries) GetPrizeWinnersByTournamentID(ctx context.Context, tournamentID int64) ([]GetPrizeWinnersByTournamentIDRow, error) {
	rows, err := q.db.Query(ctx, getPrizeWinnersByTournamentID, tournamentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPrizeWinnersByTournamentIDRow
	for rows.Next() {
		var i GetPrizeWinnersByTournamentIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BirthDate,
			&i.HeightCm,
			&i.WeightKg,
			&i.ClubID,
			&i.ClubName,
			&i.Rank,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSportByID = `-- name: GetSportByID :one
SELECT
	id,
	name
FROM sports
WHERE id = $1
`

type GetSportByIDRow struct {
	ID   int64
	Name string
}

// Query: #27 (custom)
//
// Получает спорт по идентификатору.
func (q *Queries) GetSportByID(ctx context.Context, id int64) (GetSportByIDRow, error) {
	row := q.db.QueryRow(ctx, getSportByID, id)
	var i GetSportByIDRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getSports = `-- name: GetSports :many
SELECT
	id,
	name
FROM sports
ORDER BY name
`

type GetSportsRow struct {
	ID   int64
	Name string
}

// Query: #20 (custom)
//
// Получает все виды спорта.
func (q *Queries) GetSports(ctx context.Context) ([]GetSportsRow, error) {
	rows, err := q.db.Query(ctx, getSports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSportsRow
	for rows.Next() {
		var i GetSportsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSportsBySportsmanID = `-- name: GetSportsBySportsmanID :many
SELECT
	s.id,
	s.name
FROM sports s
JOIN sportsman_sports sms ON sms.sport_id = s.id
WHERE sms.sportsman_id = $1
`

type GetSportsBySportsmanIDRow struct {
	ID   int64
	Name string
}

// Query: #19 (custom)
//
// Получение видов спорта, которыми занимается спортсмен.
func (q *Queries) GetSportsBySportsmanID(ctx context.Context, sportsmanID int64) ([]GetSportsBySportsmanIDRow, error) {
	rows, err := q.db.Query(ctx, getSportsBySportsmanID, sportsmanID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSportsBySportsmanIDRow
	for rows.Next() {
		var i GetSportsBySportsmanIDRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSportsmanByID = `-- name: GetSportsmanByID :one
SELECT
	sm.id,
	sm.name,
	sm.birth_date,
	sm.height_cm,
	sm.weight_kg,
	c.id AS club_id,
	c.name AS club_name
FROM sportsmen sm
JOIN clubs c ON c.id = sm.club_id
WHERE sm.id = $1
GROUP BY
	sm.id,
	sm.name,
	sm.birth_date,
	sm.height_cm,
	sm.weight_kg,
	c.id,
	c.name
`

type GetSportsmanByIDRow struct {
	ID        int64
	Name      string
	BirthDate pgtype.Date
	HeightCm  int16
	WeightKg  pgtype.Numeric
	ClubID    int64
	ClubName  string
}

// Query: #18 (custom)
//
// Получает спортсмена по идентификатору.
func (q *Queries) GetSportsmanByID(ctx context.Context, id int64) (GetSportsmanByIDRow, error) {
	row := q.db.QueryRow(ctx, getSportsmanByID, id)
	var i GetSportsmanByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BirthDate,
		&i.HeightCm,
		&i.WeightKg,
		&i.ClubID,
		&i.ClubName,
	)
	return i, err
}

const getSportsmen = `-- name: GetSportsmen :many
SELECT
	sm.id,
	sm.name,
	sm.birth_date,
	sm.height_cm,
	sm.weight_kg,
	c.id AS club_id,
	c.name AS club_name
FROM sportsmen sm
JOIN clubs c ON c.id = sm.club_id
LEFT JOIN sportsman_sports sms ON sms.sportsman_id = sm.id
LEFT JOIN sports s ON s.id = sms.sport_id
GROUP BY
	sm.id,
	sm.name,
	sm.birth_date,
	sm.height_cm,
	sm.weight_kg,
	c.id,
	c.name
ORDER BY sm.name
`

type GetSportsmenRow struct {
	ID        int64
	Name      string
	BirthDate pgtype.Date
	HeightCm  int16
	WeightKg  pgtype.Numeric
	ClubID    int64
	ClubName  string
}

// Query: #22 (custom)
//
// Получает всех спортсменов.
func (q *Queries) GetSportsmen(ctx context.Context) ([]GetSportsmenRow, error) {
	rows, err := q.db.Query(ctx, getSportsmen)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSportsmenRow
	for rows.Next() {
		var i GetSportsmenRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BirthDate,
			&i.HeightCm,
			&i.WeightKg,
			&i.ClubID,
			&i.ClubName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSportsmenBySportID = `-- name: GetSportsmenBySportID :many
SELECT
	sm.id,
	sm.name,
	sm.birth_date,
	sm.height_cm,
	sm.weight_kg,
	c.id AS club_id,
	c.name AS club_name,
	ss.rank AS rank
FROM sportsmen sm
JOIN clubs c ON c.id = sm.club_id
JOIN sportsman_sports ss ON ss.sportsman_id = sm.id
WHERE
	ss.sport_id = $1
	AND (
		ss.rank >= $2
		OR $2 IS NULL
	)
ORDER BY ss.rank DESC
`

type GetSportsmenBySportIDParams struct {
	SportID int64
	MinRank pgtype.Int2
}

type GetSportsmenBySportIDRow struct {
	ID        int64
	Name      string
	BirthDate pgtype.Date
	HeightCm  int16
	WeightKg  pgtype.Numeric
	ClubID    int64
	ClubName  string
	Rank      pgtype.Int2
}

// Query #2
//
// Получить список спортсменов, занимающихся указанным видом спорта в целом либо не
// ниже определенного разряда.
func (q *Queries) GetSportsmenBySportID(ctx context.Context, arg GetSportsmenBySportIDParams) ([]GetSportsmenBySportIDRow, error) {
	rows, err := q.db.Query(ctx, getSportsmenBySportID, arg.SportID, arg.MinRank)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSportsmenBySportIDRow
	for rows.Next() {
		var i GetSportsmenBySportIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BirthDate,
			&i.HeightCm,
			&i.WeightKg,
			&i.ClubID,
			&i.ClubName,
			&i.Rank,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSportsmenByTrainerID = `-- name: GetSportsmenByTrainerID :many
SELECT
	sm.id,
	sm.name,
	sm.birth_date,
	sm.height_cm,
	sm.weight_kg,
	c.id AS club_id,
	c.name AS club_name,
	ss.rank AS rank
FROM sportsmen sm
JOIN clubs c ON c.id = sm.club_id
JOIN sportsman_sports ss ON ss.sportsman_id = sm.id
JOIN sportsman_sport_trainers sst ON sst.sportsman_sport_id = ss.id
WHERE
	sst.trainer_id = $1
	AND (
		ss.rank >= $2
		OR $2 IS NULL
	)
ORDER BY ss.rank DESC
`

type GetSportsmenByTrainerIDParams struct {
	TrainerID int64
	MinRank   pgtype.Int2
}

type GetSportsmenByTrainerIDRow struct {
	ID        int64
	Name      string
	BirthDate pgtype.Date
	HeightCm  int16
	WeightKg  pgtype.Numeric
	ClubID    int64
	ClubName  string
	Rank      pgtype.Int2
}

// Query #3
//
// Получить список спортсменов, тренирующихся у некого тренера в целом либо не ниже
// определенного разряда.
func (q *Queries) GetSportsmenByTrainerID(ctx context.Context, arg GetSportsmenByTrainerIDParams) ([]GetSportsmenByTrainerIDRow, error) {
	rows, err := q.db.Query(ctx, getSportsmenByTrainerID, arg.TrainerID, arg.MinRank)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSportsmenByTrainerIDRow
	for rows.Next() {
		var i GetSportsmenByTrainerIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BirthDate,
			&i.HeightCm,
			&i.WeightKg,
			&i.ClubID,
			&i.ClubName,
			&i.Rank,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSportsmenInvolvedInSeveralSports = `-- name: GetSportsmenInvolvedInSeveralSports :many
SELECT
	sm.id,
	sm.name,
	sm.birth_date,
	sm.height_cm,
	sm.weight_kg,
	c.id AS club_id,
	c.name AS club_name
FROM sportsmen sm
JOIN clubs c ON c.id = sm.club_id
JOIN sportsman_sports sms ON sms.sportsman_id = sm.id
JOIN sports s ON s.id = sms.sport_id
GROUP BY
	sm.id,
	sm.name,
	sm.birth_date,
	sm.height_cm,
	sm.weight_kg,
	c.id,
	c.name
HAVING COUNT(sms.id) > 1
ORDER BY sm.name
`

type GetSportsmenInvolvedInSeveralSportsRow struct {
	ID        int64
	Name      string
	BirthDate pgtype.Date
	HeightCm  int16
	WeightKg  pgtype.Numeric
	ClubID    int64
	ClubName  string
}

// Query #4
//
// Получить список спортсменов, занимающихся более чем одним видом спорта с указанием
// этих видов спорта.
func (q *Queries) GetSportsmenInvolvedInSeveralSports(ctx context.Context) ([]GetSportsmenInvolvedInSeveralSportsRow, error) {
	rows, err := q.db.Query(ctx, getSportsmenInvolvedInSeveralSports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSportsmenInvolvedInSeveralSportsRow
	for rows.Next() {
		var i GetSportsmenInvolvedInSeveralSportsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BirthDate,
			&i.HeightCm,
			&i.WeightKg,
			&i.ClubID,
			&i.ClubName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStadiumByID = `-- name: GetStadiumByID :one
SELECT
	p.id,
	p.name,
	p.location,
	sa.width_cm,
	sa.length_cm,
	sa.max_spectators,
	sa.is_outdoor,
	sa.coating
FROM places p
JOIN stadium_attributes sa ON sa.place_id = p.id
WHERE p.id = $1
`

type GetStadiumByIDRow struct {
	ID            int64
	Name          string
	Location      string
	WidthCm       int64
	LengthCm      int64
	MaxSpectators int16
	IsOutdoor     bool
	Coating       string
}

// Query: #37 (custom)
//
// Получить стадион.
func (q *Queries) GetStadiumByID(ctx context.Context, id int64) (GetStadiumByIDRow, error) {
	row := q.db.QueryRow(ctx, getStadiumByID, id)
	var i GetStadiumByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.WidthCm,
		&i.LengthCm,
		&i.MaxSpectators,
		&i.IsOutdoor,
		&i.Coating,
	)
	return i, err
}

const getStadiums = `-- name: GetStadiums :many
SELECT
	p.id,
	p.name,
	p.location,
	sa.width_cm,
	sa.length_cm,
	sa.max_spectators,
	sa.is_outdoor,
	sa.coating
FROM places p
JOIN stadium_attributes sa ON sa.place_id = p.id
WHERE
	(
		sa.width_cm >= $1
		OR $1 IS NULL
	)
	AND (
		sa.length_cm >= $2
		OR $2 IS NULL
	)
	AND (
		sa.max_spectators >= $3
		OR $3 IS NULL
	)
	AND (
		sa.is_outdoor = $4
		OR $4 IS NULL
	)
	AND (
		sa.coating ILIKE $5
		OR $5 IS NULL
	)
`

type GetStadiumsParams struct {
	WidthCm       pgtype.Int8
	LengthCm      pgtype.Int8
	MaxSpectators pgtype.Int2
	IsOutdoor     pgtype.Bool
	Coating       pgtype.Text
}

type GetStadiumsRow struct {
	ID            int64
	Name          string
	Location      string
	WidthCm       int64
	LengthCm      int64
	MaxSpectators int16
	IsOutdoor     bool
	Coating       string
}

// Query #1.2
//
// Получить перечень спортивных сооружений указанного типа в целом или
// удовлетворяющих заданным характеристикам (например, стадионы, вмещающие не менее
// указанного числа зрителей).
func (q *Queries) GetStadiums(ctx context.Context, arg GetStadiumsParams) ([]GetStadiumsRow, error) {
	rows, err := q.db.Query(ctx, getStadiums,
		arg.WidthCm,
		arg.LengthCm,
		arg.MaxSpectators,
		arg.IsOutdoor,
		arg.Coating,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStadiumsRow
	for rows.Next() {
		var i GetStadiumsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.WidthCm,
			&i.LengthCm,
			&i.MaxSpectators,
			&i.IsOutdoor,
			&i.Coating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTournaments = `-- name: GetTournaments :many
SELECT
	t.id,
	t.start_at,
	p.name AS place_name,
	o.name AS organizer_name
FROM tournaments t
JOIN organizers o ON o.id = t.organizer_id
JOIN places p ON p.id = t.place_id
ORDER BY t.id DESC
`

type GetTournamentsRow struct {
	ID            int64
	StartAt       pgtype.Timestamptz
	PlaceName     string
	OrganizerName string
}

// Query: #26 (custom)
//
// Получает все соревнования.
func (q *Queries) GetTournaments(ctx context.Context) ([]GetTournamentsRow, error) {
	rows, err := q.db.Query(ctx, getTournaments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTournamentsRow
	for rows.Next() {
		var i GetTournamentsRow
		if err := rows.Scan(
			&i.ID,
			&i.StartAt,
			&i.PlaceName,
			&i.OrganizerName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTournamentsByPlaceID = `-- name: GetTournamentsByPlaceID :many
SELECT
	t.id,
	p.name AS place_name,
	o.name AS organizer_name,
	t.start_at,
	ARRAY_AGG(s.name)::TEXT[] as sport_names
FROM tournaments t
JOIN tournament_sports ts ON ts.tournament_id = t.id
JOIN sports s ON s.id = ts.sport_id
JOIN places p ON p.id = t.place_id
JOIN organizers o ON o.id = t.organizer_id
WHERE
	t.place_id = $1
GROUP BY
	t.id,
	t.start_at,
	p.name,
	o.name
HAVING
	$2 = ANY(ARRAY_AGG(s.id))
	OR $2 IS NULL
ORDER BY t.start_at DESC
`

type GetTournamentsByPlaceIDParams struct {
	PlaceID int64
	SportID pgtype.Int8
}

type GetTournamentsByPlaceIDRow struct {
	ID            int64
	PlaceName     string
	OrganizerName string
	StartAt       pgtype.Timestamptz
	SportNames    []string
}

// Query #8
//
// Получить перечень соревнований, проведенных в указанном спортивном сооружении в
// целом либо по определенному виду спорта.
func (q *Queries) GetTournamentsByPlaceID(ctx context.Context, arg GetTournamentsByPlaceIDParams) ([]GetTournamentsByPlaceIDRow, error) {
	rows, err := q.db.Query(ctx, getTournamentsByPlaceID, arg.PlaceID, arg.SportID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTournamentsByPlaceIDRow
	for rows.Next() {
		var i GetTournamentsByPlaceIDRow
		if err := rows.Scan(
			&i.ID,
			&i.PlaceName,
			&i.OrganizerName,
			&i.StartAt,
			&i.SportNames,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTournamentsForPeriod = `-- name: GetTournamentsForPeriod :many
SELECT
	t.id,
	t.start_at,
	p.name AS place_name,
	o.name AS organizer_name,
	ARRAY_AGG(s.name)::TEXT[] as sport_names
FROM tournaments t
JOIN tournament_sports ts ON ts.tournament_id = t.id
JOIN sports s ON s.id = ts.sport_id
JOIN places p ON p.id = t.place_id
JOIN organizers o ON o.id = t.organizer_id
WHERE
	t.start_at BETWEEN $1 AND $2
	AND (
		t.organizer_id = $3
		OR $3 IS NULL
	)
GROUP BY
	t.id,
	t.start_at,
	p.name,
	o.name
`

type GetTournamentsForPeriodParams struct {
	StartAt     pgtype.Timestamptz
	EndAt       pgtype.Timestamptz
	OrganizerID pgtype.Int8
}

type GetTournamentsForPeriodRow struct {
	ID            int64
	StartAt       pgtype.Timestamptz
	PlaceName     string
	OrganizerName string
	SportNames    []string
}

// Query #6
//
// Получить перечень соревнований, проведенных в течение заданного периода времени в
// целом либо указанным организатором.
func (q *Queries) GetTournamentsForPeriod(ctx context.Context, arg GetTournamentsForPeriodParams) ([]GetTournamentsForPeriodRow, error) {
	rows, err := q.db.Query(ctx, getTournamentsForPeriod, arg.StartAt, arg.EndAt, arg.OrganizerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTournamentsForPeriodRow
	for rows.Next() {
		var i GetTournamentsForPeriodRow
		if err := rows.Scan(
			&i.ID,
			&i.StartAt,
			&i.PlaceName,
			&i.OrganizerName,
			&i.SportNames,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrainerByID = `-- name: GetTrainerByID :one
SELECT
	id,
	name
FROM trainers
WHERE id = $1
`

type GetTrainerByIDRow struct {
	ID   int64
	Name string
}

// Query: #54 (custom)
//
// Получает клуб по идентификатору.
func (q *Queries) GetTrainerByID(ctx context.Context, id int64) (GetTrainerByIDRow, error) {
	row := q.db.QueryRow(ctx, getTrainerByID, id)
	var i GetTrainerByIDRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getTrainers = `-- name: GetTrainers :many
SELECT
	id,
	name
FROM trainers
`

type GetTrainersRow struct {
	ID   int64
	Name string
}

// Query: #31 (custom)
//
// Получает всех тренеров.
func (q *Queries) GetTrainers(ctx context.Context) ([]GetTrainersRow, error) {
	rows, err := q.db.Query(ctx, getTrainers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTrainersRow
	for rows.Next() {
		var i GetTrainersRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrainersBySportID = `-- name: GetTrainersBySportID :many
SELECT DISTINCT
	t.id,
	t.name
FROM trainers t
JOIN sportsman_sport_trainers sst ON sst.trainer_id = t.id
JOIN sportsman_sports ss ON ss.id = sst.sportsman_sport_id
WHERE ss.sport_id = $1
ORDER BY t.name
`

type GetTrainersBySportIDRow struct {
	ID   int64
	Name string
}

// Query #10
//
// Получить список тренеров по определенному виду спорта.
func (q *Queries) GetTrainersBySportID(ctx context.Context, sportID int64) ([]GetTrainersBySportIDRow, error) {
	rows, err := q.db.Query(ctx, getTrainersBySportID, sportID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTrainersBySportIDRow
	for rows.Next() {
		var i GetTrainersBySportIDRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrainersBySportsmanID = `-- name: GetTrainersBySportsmanID :many
SELECT
	t.id,
	t.name
FROM trainers t
JOIN sportsman_sport_trainers sst ON sst.trainer_id = t.id
JOIN sportsman_sports ss ON ss.id = sst.sportsman_sport_id
WHERE ss.sportsman_id = $1
`

type GetTrainersBySportsmanIDRow struct {
	ID   int64
	Name string
}

// Query #5
//
// Получить список тренеров указанного спортсмена.
func (q *Queries) GetTrainersBySportsmanID(ctx context.Context, sportsmanID int64) ([]GetTrainersBySportsmanIDRow, error) {
	rows, err := q.db.Query(ctx, getTrainersBySportsmanID, sportsmanID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTrainersBySportsmanIDRow
	for rows.Next() {
		var i GetTrainersBySportsmanIDRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertArena = `-- name: InsertArena :exec
WITH
place_type AS (
	SELECT id FROM place_types WHERE attributes_table_name = 'arena_attributes'
),
place AS (
	INSERT INTO places (name, location, type_id)
	VALUES ($3, $4, (SELECT id FROM place_type))
	RETURNING id
)
INSERT INTO arena_attributes (place_id, referees_count, treadmill_length_cm)
VALUES ((SELECT id FROM place), $1, $2)
`

type InsertArenaParams struct {
	RefereesCount     int16
	TreadmillLengthCm int64
	Name              string
	Location          string
}

// Query: #14 (custom)
//
// Создаёт манеж и задаёт для него аттрибуты.
func (q *Queries) InsertArena(ctx context.Context, arg InsertArenaParams) error {
	_, err := q.db.Exec(ctx, insertArena,
		arg.RefereesCount,
		arg.TreadmillLengthCm,
		arg.Name,
		arg.Location,
	)
	return err
}

const insertClub = `-- name: InsertClub :exec
INSERT INTO clubs (name)
VALUES ($1)
`

// Query: #47 (custom)
//
// Создать клуб.
func (q *Queries) InsertClub(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, insertClub, name)
	return err
}

const insertCourt = `-- name: InsertCourt :exec
WITH
place_type AS (
	SELECT id FROM place_types WHERE attributes_table_name = 'court_attributes'
),
place AS (
	INSERT INTO places (name, location, type_id)
	VALUES ($4, $5, (SELECT id FROM place_type))
	RETURNING id
)
INSERT INTO court_attributes (place_id, width_cm, length_cm, is_outdoor)
VALUES ((SELECT id FROM place), $1, $2, $3)
`

type InsertCourtParams struct {
	WidthCm   int64
	LengthCm  int64
	IsOutdoor bool
	Name      string
	Location  string
}

// Query: #16 (custom)
//
// Создаёт корт и задаёт для него аттрибуты.
func (q *Queries) InsertCourt(ctx context.Context, arg InsertCourtParams) error {
	_, err := q.db.Exec(ctx, insertCourt,
		arg.WidthCm,
		arg.LengthCm,
		arg.IsOutdoor,
		arg.Name,
		arg.Location,
	)
	return err
}

const insertGym = `-- name: InsertGym :exec
WITH
place_type AS (
	SELECT id FROM place_types WHERE attributes_table_name = 'gym_attributes'
),
place AS (
	INSERT INTO places (name, location, type_id)
	VALUES ($4, $5, (SELECT id FROM place_type))
	RETURNING id
)
INSERT INTO gym_attributes (place_id, trainers_count, dumbbells_count, has_bathhouse)
VALUES ((SELECT id FROM place), $1, $2, $3)
`

type InsertGymParams struct {
	TrainersCount  int16
	DumbbellsCount int16
	HasBathhouse   bool
	Name           string
	Location       string
}

// Query: #17 (custom)
//
// Создаёт зал и задаёт для него аттрибуты.
func (q *Queries) InsertGym(ctx context.Context, arg InsertGymParams) error {
	_, err := q.db.Exec(ctx, insertGym,
		arg.TrainersCount,
		arg.DumbbellsCount,
		arg.HasBathhouse,
		arg.Name,
		arg.Location,
	)
	return err
}

const insertOrganizer = `-- name: InsertOrganizer :exec
INSERT INTO organizers (name, location)
VALUES ($1, $2)
`

type InsertOrganizerParams struct {
	Name     string
	Location pgtype.Text
}

// Query: #43 (custom)
//
// Создать организатора.
func (q *Queries) InsertOrganizer(ctx context.Context, arg InsertOrganizerParams) error {
	_, err := q.db.Exec(ctx, insertOrganizer, arg.Name, arg.Location)
	return err
}

const insertSport = `-- name: InsertSport :exec
INSERT INTO sports (name)
VALUES ($1)
`

// Query: #29 (custom)
//
// Создаёт вид спорта.
func (q *Queries) InsertSport(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, insertSport, name)
	return err
}

const insertSportsman = `-- name: InsertSportsman :exec
WITH sportsman AS (
	INSERT INTO sportsmen (name, birth_date, height_cm, weight_kg, club_id)
	VALUES ($1, $2, $3, $4, $5)
	RETURNING id
)
INSERT INTO sportsman_sports (sportsman_id, sport_id)
SELECT
	id,
	sport_id
FROM
	sportsman,
	UNNEST($6::BIGINT[]) AS sport_id
`

type InsertSportsmanParams struct {
	Name      string
	BirthDate pgtype.Date
	HeightCm  int16
	WeightKg  pgtype.Numeric
	ClubID    int64
	SportIds  []int64
}

// Query: #25 (custom)
//
// Создаёт спортсмена.
func (q *Queries) InsertSportsman(ctx context.Context, arg InsertSportsmanParams) error {
	_, err := q.db.Exec(ctx, insertSportsman,
		arg.Name,
		arg.BirthDate,
		arg.HeightCm,
		arg.WeightKg,
		arg.ClubID,
		arg.SportIds,
	)
	return err
}

const insertStadium = `-- name: InsertStadium :exec
WITH
place_type AS (
	SELECT id FROM place_types WHERE attributes_table_name = 'stadium_attributes'
),
place AS (
	INSERT INTO places (name, location, type_id)
	VALUES ($6, $7, (SELECT id FROM place_type))
	RETURNING id
)
INSERT INTO stadium_attributes (place_id, width_cm, length_cm, max_spectators, is_outdoor, coating)
VALUES ((SELECT id FROM place), $1, $2, $3, $4, $5)
`

type InsertStadiumParams struct {
	WidthCm       int64
	LengthCm      int64
	MaxSpectators int16
	IsOutdoor     bool
	Coating       string
	Name          string
	Location      string
}

// Query: #15 (custom)
//
// Создаёт стадион и задаёт для него аттрибуты.
func (q *Queries) InsertStadium(ctx context.Context, arg InsertStadiumParams) error {
	_, err := q.db.Exec(ctx, insertStadium,
		arg.WidthCm,
		arg.LengthCm,
		arg.MaxSpectators,
		arg.IsOutdoor,
		arg.Coating,
		arg.Name,
		arg.Location,
	)
	return err
}

const insertTournament = `-- name: InsertTournament :exec
WITH tournament AS (
	INSERT INTO tournaments (place_id, organizer_id, start_at)
	VALUES ($1, $2, $3)
	RETURNING id
)
INSERT INTO tournament_sports (tournament_id, sport_id)
SELECT
	id,
	sport_id
FROM
	tournament,
	UNNEST($4::BIGINT[]) AS sport_id
`

type InsertTournamentParams struct {
	PlaceID     int64
	OrganizerID int64
	StartAt     pgtype.Timestamptz
	SportIds    []int64
}

// Query: #55 (custom)
//
// Создать соревнование.
func (q *Queries) InsertTournament(ctx context.Context, arg InsertTournamentParams) error {
	_, err := q.db.Exec(ctx, insertTournament,
		arg.PlaceID,
		arg.OrganizerID,
		arg.StartAt,
		arg.SportIds,
	)
	return err
}

const insertTrainer = `-- name: InsertTrainer :exec
INSERT INTO trainers (name)
VALUES ($1)
`

// Query: #51 (custom)
//
// Создать тренера.
func (q *Queries) InsertTrainer(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, insertTrainer, name)
	return err
}

const updateArenaByID = `-- name: UpdateArenaByID :exec
WITH updated_attributes AS (
	UPDATE arena_attributes
	SET
		referees_count = $1,
		treadmill_length_cm = $2
	WHERE place_id = $3
	RETURNING place_id
)
UPDATE places
SET
	name = $4,
	location = $5
WHERE id = $3
`

type UpdateArenaByIDParams struct {
	RefereesCount     int16
	TreadmillLengthCm int64
	ID                int64
	Name              string
	Location          string
}

// Query: #36 (custom)
//
// Обновить арену.
func (q *Queries) UpdateArenaByID(ctx context.Context, arg UpdateArenaByIDParams) error {
	_, err := q.db.Exec(ctx, updateArenaByID,
		arg.RefereesCount,
		arg.TreadmillLengthCm,
		arg.ID,
		arg.Name,
		arg.Location,
	)
	return err
}

const updateClubByID = `-- name: UpdateClubByID :exec
UPDATE clubs
SET name = $1
WHERE id = $2
`

type UpdateClubByIDParams struct {
	Name string
	ID   int64
}

// Query: #48 (custom)
//
// Обновляет клуб.
func (q *Queries) UpdateClubByID(ctx context.Context, arg UpdateClubByIDParams) error {
	_, err := q.db.Exec(ctx, updateClubByID, arg.Name, arg.ID)
	return err
}

const updateCourtByID = `-- name: UpdateCourtByID :exec
WITH updated_attributes AS (
	UPDATE court_attributes
	SET
		width_cm = $1,
		length_cm = $2,
		is_outdoor = $3
	WHERE place_id = $4
	RETURNING place_id
)
UPDATE places
SET
	name = $5,
	location = $6
WHERE id = $4
`

type UpdateCourtByIDParams struct {
	WidthCm   int64
	LengthCm  int64
	IsOutdoor bool
	ID        int64
	Name      string
	Location  string
}

// Query: #40 (custom)
//
// Обновить корт.
func (q *Queries) UpdateCourtByID(ctx context.Context, arg UpdateCourtByIDParams) error {
	_, err := q.db.Exec(ctx, updateCourtByID,
		arg.WidthCm,
		arg.LengthCm,
		arg.IsOutdoor,
		arg.ID,
		arg.Name,
		arg.Location,
	)
	return err
}

const updateGymByID = `-- name: UpdateGymByID :exec
WITH updated_attributes AS (
	UPDATE gym_attributes
	SET
		trainers_count = $1,
		dumbbells_count = $2,
		has_bathhouse = $3
	WHERE place_id = $4
	RETURNING place_id
)
UPDATE places
SET
	name = $5,
	location = $6
WHERE id = $4
`

type UpdateGymByIDParams struct {
	TrainersCount  int16
	DumbbellsCount int16
	HasBathhouse   bool
	ID             int64
	Name           string
	Location       string
}

// Query: #42 (custom)
//
// Обновить зал.
func (q *Queries) UpdateGymByID(ctx context.Context, arg UpdateGymByIDParams) error {
	_, err := q.db.Exec(ctx, updateGymByID,
		arg.TrainersCount,
		arg.DumbbellsCount,
		arg.HasBathhouse,
		arg.ID,
		arg.Name,
		arg.Location,
	)
	return err
}

const updateOrganizerByID = `-- name: UpdateOrganizerByID :exec
UPDATE organizers
SET
	name = $1,
	location = $2
WHERE id = $3
`

type UpdateOrganizerByIDParams struct {
	Name     string
	Location pgtype.Text
	ID       int64
}

// Query: #44 (custom)
//
// Обновляет организатора.
func (q *Queries) UpdateOrganizerByID(ctx context.Context, arg UpdateOrganizerByIDParams) error {
	_, err := q.db.Exec(ctx, updateOrganizerByID, arg.Name, arg.Location, arg.ID)
	return err
}

const updateSportByID = `-- name: UpdateSportByID :exec
UPDATE sports
SET name = $1
WHERE id = $2
`

type UpdateSportByIDParams struct {
	Name string
	ID   int64
}

// Query: #30 (custom)
//
// Обновляет вид спорта.
func (q *Queries) UpdateSportByID(ctx context.Context, arg UpdateSportByIDParams) error {
	_, err := q.db.Exec(ctx, updateSportByID, arg.Name, arg.ID)
	return err
}

const updateSportsmanByID = `-- name: UpdateSportsmanByID :exec
WITH deleted_sportsman_sport_ids AS (
	DELETE FROM sportsman_sports
	WHERE
		sportsman_id = $1
		AND NOT (sport_id = ANY($7::BIGINT[]))
	RETURNING id
),
inserted_sportsman_sport_ids AS (
	INSERT INTO sportsman_sports (sportsman_id, sport_id)
	SELECT
		$1,
		sport_id
	FROM UNNEST($7::BIGINT[]) AS sport_id
	ON CONFLICT (sportsman_id, sport_id) DO NOTHING
	RETURNING id
)
UPDATE sportsmen AS sm
SET
	name = $2,
	birth_date = $3,
	height_cm = $4,
	weight_kg = $5,
	club_id = $6
WHERE sm.id = $1
`

type UpdateSportsmanByIDParams struct {
	ID        int64
	Name      string
	BirthDate pgtype.Date
	HeightCm  int16
	WeightKg  pgtype.Numeric
	ClubID    int64
	SportIds  []int64
}

// Query: #23 (custom)
//
// Обновляет спортсмена по идентификатору.
func (q *Queries) UpdateSportsmanByID(ctx context.Context, arg UpdateSportsmanByIDParams) error {
	_, err := q.db.Exec(ctx, updateSportsmanByID,
		arg.ID,
		arg.Name,
		arg.BirthDate,
		arg.HeightCm,
		arg.WeightKg,
		arg.ClubID,
		arg.SportIds,
	)
	return err
}

const updateStadiumByID = `-- name: UpdateStadiumByID :exec
WITH updated_attributes AS (
	UPDATE stadium_attributes
	SET
		width_cm = $1,
		length_cm = $2,
		max_spectators = $3,
		is_outdoor = $4,
		coating = $5
	WHERE place_id = $6
	RETURNING place_id
)
UPDATE places
SET
	name = $7,
	location = $8
WHERE id = $6
`

type UpdateStadiumByIDParams struct {
	WidthCm       int64
	LengthCm      int64
	MaxSpectators int16
	IsOutdoor     bool
	Coating       string
	ID            int64
	Name          string
	Location      string
}

// Query: #38 (custom)
//
// Обновить стадион.
func (q *Queries) UpdateStadiumByID(ctx context.Context, arg UpdateStadiumByIDParams) error {
	_, err := q.db.Exec(ctx, updateStadiumByID,
		arg.WidthCm,
		arg.LengthCm,
		arg.MaxSpectators,
		arg.IsOutdoor,
		arg.Coating,
		arg.ID,
		arg.Name,
		arg.Location,
	)
	return err
}

const updateTrainerByID = `-- name: UpdateTrainerByID :exec
UPDATE trainers
SET name = $1
WHERE id = $2
`

type UpdateTrainerByIDParams struct {
	Name string
	ID   int64
}

// Query: #52 (custom)
//
// Обновляет тренера.
func (q *Queries) UpdateTrainerByID(ctx context.Context, arg UpdateTrainerByIDParams) error {
	_, err := q.db.Exec(ctx, updateTrainerByID, arg.Name, arg.ID)
	return err
}
